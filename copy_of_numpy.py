# -*- coding: utf-8 -*-
"""Copy of Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mr9SlTocuad-6njffIuEfPbqCXbod1G

# Numpy
"""

# pip install numpy

import numpy as np

"""## Numpy Create Array"""

#@title 0-D Array

var_array = np.array(42)

print(var_array)

#@title 1-D Array

var_array = np.array([1, 2, 3, 4, 5])

print(var_array)

var_array = np.ones(5)
print(var_array)

var_array = np.zeros(4)
print(var_array)

var_array = np.random.random(6)
print(var_array)

#@title 2-D Array

var_array = np.array([[1, 2, 3], [4, 5, 6]])

print(var_array)

#@title 3-D Array

var_array = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
print(var_array)

#@title Check dimensi array

a = np.array(42)
b = np.array([1, 2, 3, 4, 5])
c = np.array([[1, 2, 3], [4, 5, 6]])
d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])

print(a.ndim)
print(b.ndim)
print(c.ndim)
print(d.ndim)

#@title Create array range
#numpy.arange(start, stop, step)

var_array = np.arange(1, 20, 2)
print(var_array)

# create with reshape

var_array = np.arange(10).reshape((2, 5))
print(var_array)

# create numpy text

var_array = np.array(['apple', 'banana', 'cherry'])
print(var_array)

"""## Numpy Array Indexing"""

#@title Akses indeks

# 1-D
var_array = np.array([85, 55, 40, 90])

# mengakses data pada array
print(var_array[3])

# 2-D
var_array = np.array([[1,2,3,4,5], [6,7,8,9,10]])

print(var_array[1, 2])

# 3-D
var_array = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

print(var_array[1, 1, 2])

#@title Operation indeks

var_array = np.array([1, 2, 3, 4])

print(var_array[2] + var_array[3])

print(var_array[0] + var_array[2])

#@title Slicing array

# 1-D
var_array = np.array([1, 2, 3, 4, 5, 6, 7])

print(var_array[3:])

# 2-D
var_array = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

print(var_array[0, 1:4])

# 3-D
var_array = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

print(var_array[1, 1, 0:2])

#@title Iterating Arrays

var_array = np.array([1, 2, 3])

for x in var_array:
  print(x)

var_array = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

for x in var_array:
  print(x)

"""## Numpy Array Join"""

#@title Concatenate

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

arr = np.concatenate((arr1, arr2))
print(arr)

var_array1 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
var_array2 = np.array([[[4, 7, 9], [1, 6, 2]], [[3, 5, 8], [19, 10, 14]]])

arr = np.concatenate((var_array1, var_array2))
print(arr)

#@title Stack

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# arr = np.stack((arr1, arr2))
# arr = np.hstack((arr1, arr2))
# arr = np.vstack((arr1, arr2))
arr = np.dstack((arr1, arr2))

print(arr)

"""## Numpy Splitting"""

# 1-D
arr = np.array([1, 2, 3, 4, 5, 6])
newarr = np.array_split(arr, 3)

print(newarr)

# 2-D
arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])
newarr = np.array_split(arr, 3)

print(newarr)

# 3-D
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
newarr = np.array_split(arr, 2)

print(newarr)

"""## Numpy Matriks"""

matriks = [[1,2,3],
           [4,5,6],
           [7,8,9]]

matrik_np = np.array(matriks)
print(matrik_np)

#@title Operasi matrik

matrik_a = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]])

matrik_b = np.array([
    [3, 2, 1],
    [6, 5, 4],
    [9, 8, 7]])


hasil = matrik_a + matrik_b
print("Hasil Penjumlahan:")
print(hasil)

hasil = matrik_a - matrik_b
print("Hasil Pengurangan:")
print(hasil)

# pangkat dengan power()

result_power = np.power(matrik_a, 2)
print("Hasil Perhitungan Pangkat (matrik_a pangkat 2):")
print(result_power)

# trigonometri dengan sin()

result_power = np.sin(matrik_a)
print("Hasil sin matrik_a:")
print(result_power)

#@title Transpose matrik

matrik_a = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]])

print("Matrik awal: ")
print(matrik_a)


hasil = matrik_a.transpose()
print("\nMatrik kebalikan: ")
print(hasil)

#@title Reshape matrik

matrik_a = np.array([1, 2, 3, 4, 5, 6])

print("Matrik awal: ")
print(matrik_a)
print("Ukuran = ", matrik_a.shape)

# mengubah ukran ke 3x2
hasil = matrik_a.reshape(3, 2)

print("\nMengubah ke 3x2: ")
print(hasil)
print("Ukuran = ", hasil.shape)

#@title Matrik flatten

matrik_a = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]])

print("Matrik awal: ")
print(matrik_a)
print("Ukuran = ", matrik_a.shape)

hasil = matrik_a.flatten()

print("\nMatrik setelah di-flatten: ")
print(hasil)
print("Ukuran = ", hasil.shape)

"""## Numpy Statistik"""

#@title rata-rata (mean)

data = np.array([12, 15, 18, 22, 30, 35, 40, 45, 55, 65])

mean = np.mean(data)
print("Rata-rata (mean):", mean)

#@title median

median = np.median(data)
print("Median:", median)

#@title standard deviation

std_deviation = np.std(data)
print("Deviasi Standar (standard deviation):", std_deviation)

#@title variansi (variance)

variance = np.var(data)
print("Variansi (variance):", variance)

#@title minimum dan maksimum

minimum = np.min(data)
maximum = np.max(data)
print("Nilai Minimum:", minimum)
print("Nilai Maksimum:", maximum)

#@title quartile

# Menghitung kuartil pertama (Q1) dan kuartil ketiga (Q3)
q1 = np.percentile(data, 25)
q3 = np.percentile(data, 75)
print("Kuartil Pertama (Q1):", q1)
print("Kuartil Ketiga (Q3):", q3)


# Menghitung rentang interkuartil (IQR)
iqr = q3 - q1
print("Rentang Interkuartil (IQR):", iqr)

"""## Soal 1

Buat contoh :

* numpy array (1D, 2D, 3D)
* numpy join
* numpy split
* operasi matrik

## Soal 2

* Buatlah numpy array dengan matrik ukuran 3x4 dan range array 10-30
* Kemudian lakukan flatten
* cari nilai statistik (mean, median, dsb)
"""